openapi: 3.0.0
info:
  title: KUSHOP API
  description: KUSHOP Project from Kasetsart University Sriracha Campus.
  version: 0.1
servers:
  - url: http://localhost:3000/

paths:
  /products:
    get:
      summary: Returns a list all of products.
      description: |
        List all products in array of object format.<br>
        Each product contains details like product ID, name, price, etc.
      responses:
        '200':
          description: A JSON array of Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/productWithRelations'
        '500':
          description: Server Error
          
    post:
      summary: Creates a new Product.
      description: Create a new product with required fields.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newProduct'
      responses:
        '201':
          description: Product is created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '409':
          description: Product ID already exists.
        '422':
          description: Missing required fields (pdId and pdName are required).
        '500':
          description: Server Error

  /products/ten:
    get:
      summary: Returns first 50 products.
      description: Get a limited number of products (50 items).
      responses:
        '200':
          description: A JSON array of Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/productWithRelations'
        '500':
          description: Server Error

  /products/{id}:
    get:
      summary: Returns the specified product by ID.
      description: Get a single product with brand and product type details.
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productWithRelations'
        '404':
          description: Product not found
        '500':
          description: Server Error
          
    put:
      summary: Updates an existing product.
      description: Update all fields of a product.
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProduct'
      responses:
        '201':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '404':
          description: Product not found
        '500':
          description: Server Error
          
    delete:
      summary: Deletes a product.
      description: Delete a product by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID to delete
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully (no content)
        '404':
          description: Product not found
        '500':
          description: Server Error

  /products/search/{id}:
    get:
      summary: Search products by ID, name or remark.
      description: Search products that match the search term in ID, name or remark fields.
      parameters:
        - name: id
          in: path
          required: true
          description: Search term
          schema:
            type: string
      responses:
        '200':
          description: Matching products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/productWithRelations'
        '500':
          description: Server Error

  /products/brands/{id}:
    get:
      summary: Get products by brand ID.
      description: Returns all products for a specific brand.
      parameters:
        - name: id
          in: path
          required: true
          description: Brand ID
          schema:
            type: string
      responses:
        '200':
          description: Products for the specified brand
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/productWithRelations'
        '404':
          description: Brand not found
        '500':
          description: Server Error

  /members:
    post:
      summary: Register a new member
      description: Create a new member account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newMember'
      responses:
        '200':
          description: Registration result
          content:
            application/json:
              schema:
                type: object
                properties:
                  regist:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Missing required fields
        '409':
          description: Email already exists
        '500':
          description: Server Error

  /members/login:
    post:
      summary: Login member
      description: Authenticate member and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginname:
                  type: string
                password:
                  type: string
              required:
                - loginname
                - password
      responses:
        '200':
          description: Login result
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: boolean
                  token:
                    type: string
                  isAdmin:
                    type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Server Error

  /members/logout:
    get:
      summary: Logout member
      description: Clear authentication cookie
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: boolean
        '500':
          description: Server Error

  /members/uploadimg:
    post:
      summary: Upload member profile image
      description: Upload a profile picture for member
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
        '400':
          description: Bad request
        '500':
          description: Server Error

  /members/profile:
    get:
      summary: Get member profile
      description: Retrieve authenticated member's profile
      responses:
        '200':
          description: Member profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  profile:
                    $ref: '#/components/schemas/memberProfile'
        '401':
          description: Unauthorized
        '404':
          description: Member not found
        '500':
          description: Server Error
    put:
      summary: Update member profile
      description: Update member's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memName:
                  type: string
              required:
                - memName
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                  profile:
                    $ref: '#/components/schemas/memberProfile'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server Error

  /members/password:
    put:
      summary: Change member password
      description: Update member's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memEmail:
                  type: string
                currentPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - memEmail
                - currentPassword
                - newPassword
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized or incorrect password
        '404':
          description: Member not found
        '500':
          description: Server Error

  /carts/chkcart:
    post:
      summary: Check existing cart for customer
      description: Check if customer has an active cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memEmail:
                  type: string
                  description: Customer email
              required:
                - memEmail
      responses:
        '200':
          description: Cart check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  cartExist:
                    type: boolean
                  cartId:
                    type: string
                    description: Existing cart ID if exists
        '400':
          description: Missing required fields
        '500':
          description: Server Error

  /carts/addcart:
    post:
      summary: Create a new cart
      description: Create a new shopping cart for customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cusId:
                  type: string
                  description: Customer ID
              required:
                - cusId
      responses:
        '200':
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cartOK:
                    type: boolean
                  messageAddCart:
                    type: string
                    description: Cart ID if successful
        '400':
          description: Missing required fields
        '500':
          description: Server Error

  /carts/addcartdtl:
    post:
      summary: Add item to cart
      description: Add product to cart or update quantity if exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                pdId:
                  type: string
                pdPrice:
                  type: number
              required:
                - cartId
                - pdId
                - pdPrice
      responses:
        '200':
          description: Item added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cartDtlOK:
                    type: boolean
                  messageAddCart:
                    type: string
        '400':
          description: Missing required fields
        '500':
          description: Server Error

  /carts/sumcart/{id}:
    get:
      summary: Get cart summary
      description: Get total quantity and price of items in cart
      parameters:
        - name: id
          in: path
          required: true
          description: Cart ID
          schema:
            type: string
      responses:
        '200':
          description: Cart summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  qty:
                    type: number
                  money:
                    type: number
        '500':
          description: Server Error

  /carts/getcart/{id}:
    get:
      summary: Get cart details
      description: Get cart information with summary
      parameters:
        - name: id
          in: path
          required: true
          description: Cart ID
          schema:
            type: string
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart'
        '500':
          description: Server Error

  /carts/getcartdtl/{id}:
    get:
      summary: Get cart items
      description: Get list of items in cart
      parameters:
        - name: id
          in: path
          required: true
          description: Cart ID
          schema:
            type: string
      responses:
        '200':
          description: List of cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cartItem'
        '500':
          description: Server Error

  /carts/getcartbycus:
    post:
      summary: Get carts by customer
      description: Get all carts for a customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: Customer ID
              required:
                - id
      responses:
        '200':
          description: List of customer's carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart'
        '500':
          description: Server Error

  /carts/deleteItem/{cartId}/{rowNumber}:
    delete:
      summary: Delete item from cart
      description: Remove an item from cart by row number
      parameters:
        - name: cartId
          in: path
          required: true
          description: Cart ID
          schema:
            type: string
        - name: rowNumber
          in: path
          required: true
          description: Row number of item to delete
          schema:
            type: integer
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Server Error

  /carts/deleteCart/{cartId}:
    delete:
      summary: Delete entire cart
      description: Remove cart and all its items
      parameters:
        - name: cartId
          in: path
          required: true
          description: Cart ID to delete
          schema:
            type: string
      responses:
        '200':
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          description: Server Error

  /orders/create:
    post:
      summary: Confirm order
      description: Convert cart to confirmed order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                cusId:
                  type: string
                status:
                  type: string
                  description: Order status
              required:
                - cartId
                - cusId
                - status
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  orderId:
                    type: string
        '400':
          description: Cart is empty
        '500':
          description: Server Error

components:
  schemas:
    product:
      type: object
      properties:
        pdId:
          type: string
          description: Product ID (unique)
        pdName:
          type: string
          description: Product name
        pdPrice:
          type: number
          description: Product price
        pdRemark:
          type: string
          description: Product remark/description
          nullable: true
        pdTypeid:
          type: string
          description: Product type ID
        brandId:
          type: string
          description: Brand ID
        createDate:
          type: string
          format: date-time
          description: Creation timestamp
        updateDate:
          type: string
          format: date-time
          description: Last update timestamp
          nullable: true

    productWithRelations:
      type: object
      properties:
        pdId:
          type: string
        pdName:
          type: string
        pdPrice:
          type: number
        pdRemark:
          type: string
          nullable: true
        pdTypeid:
          type: string
        brandId:
          type: string
        brand:
          $ref: '#/components/schemas/brand'
        pdt:
          $ref: '#/components/schemas/productType'

    newProduct:
      type: object
      required:
        - pdId
        - pdName
      properties:
        pdId:
          type: string
        pdName:
          type: string
        pdPrice:
          type: number
          default: 0
        pdRemark:
          type: string
          nullable: true
        pdTypeid:
          type: string
        brandId:
          type: string

    updateProduct:
      type: object
      properties:
        pdId:
          type: string
        pdName:
          type: string
        pdPrice:
          type: number
        pdRemark:
          type: string
          nullable: true
        pdTypeid:
          type: string
        brandId:
          type: string

    brand:
      type: object
      properties:
        brandId:
          type: string
        brandName:
          type: string
    
    productType:
      type: object
      properties:
        pdTypeid:
          type: string
        pdTypeName:
          type: string

    newMember:
      type: object
      required:
        - memEmail
        - memName
        - password
      properties:
        memEmail:
          type: string
          format: email
        memName:
          type: string
        password:
          type: string
          format: password

    memberProfile:
      type: object
      properties:
        memEmail:
          type: string
        memName:
          type: string
        dutyId:
          type: string

    cart:
      type: object
      properties:
        cartId:
          type: string
        cusId:
          type: string
        cartDate:
          type: string
          format: date-time
        cartCf:
          type: boolean
          description: Cart confirmed status
        sqty:
          type: number
          description: Total quantity
        sprice:
          type: number
          description: Total price

    cartItem:
      type: object
      properties:
        row_number:
          type: integer
        pdId:
          type: string
        pdName:
          type: string
        qty:
          type: number
        price:
          type: number

    order:
      type: object
      properties:
        orderId:
          type: string
        cartId:
          type: string
        cusId:
          type: string
        status:
          type: string
        orderDate:
          type: string
          format: date-time